{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["query","IndexPage","data","useContext","Context","state","setState","useState","language","setLanguage","useEffect","title","className","allMarkdownRemark","edges","filter","edge","node","frontmatter","type","map","dangerouslySetInnerHTML","__html","html"],"mappings":"0FAAA,2FAWaA,EAAK,YAoEHC,UAlDG,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACFC,qBAAWC,KAA/BC,EADsB,EACtBA,MADsB,KACfC,SACiBC,mBAAS,OAAlCC,EAFuB,KAEbC,EAFa,KAmB9B,OAdAC,qBAAU,WACRD,EAAYJ,EAAMG,YAWjB,CAACH,IAGF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKM,MAAM,SACX,6BAASC,UAAU,UAChBV,EAAKW,kBAAkBC,MACrBC,QACC,SAAAC,GAAI,MAC6B,SAA/BA,EAAKC,KAAKC,YAAYC,MACtBH,EAAKC,KAAKC,YAAYV,WAAaA,KAEtCY,KAAI,SAAAJ,GAAI,OACP,oCAWE,4BAAKA,EAAKC,KAAKC,YAAYP,OAC3B,yBAAKU,wBAAyB,CAAEC,OAAQN,EAAKC,KAAKM","file":"component---src-pages-index-js-7acad10effb2eb1707a2.js","sourcesContent":["import React, { useState, useContext, useEffect, useRef } from \"react\"\nimport Context from \"../context/context\"\nimport { graphql } from \"gatsby\"\n// import TypeIt from \"typeit-react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\n// let isLanding = true\n// let typingCount = 0\n\nexport const query = graphql`\n  query HomePageQuery {\n    allMarkdownRemark {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            title\n            language\n            type\n          }\n        }\n      }\n    }\n  }\n`\n\nconst IndexPage = ({ data }) => {\n  const { state, setState } = useContext(Context)\n  const [language, setLanguage] = useState(\"en\")\n  // const [instance, setInstance] = useState(null)\n\n  useEffect(() => {\n    setLanguage(state.language)\n    // if (instance !== null) {\n    //   // instance.start()\n    //   // instance.destroy()\n    //   // instance.delete()\n    //   instance.reset()\n    //   // instance.empty()\n    //   // instance.options({texts: ['test']}).go()\n    //   // instance.type(\"test\")\n    //   instance.go()\n    // }\n  }, [state])\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <article className=\"gospel\">\n        {data.allMarkdownRemark.edges\n          .filter(\n            edge =>\n              edge.node.frontmatter.type === \"home\" &&\n              edge.node.frontmatter.language === language\n          )\n          .map(edge => (\n            <>\n              {/* <TypeIt */}\n              {/*   element={\"h2\"} */}\n              {/*   options={{ cursorChar: \" &#9608;\", startDelete: true }} */}\n              {/*   getBeforeInit={instance => { */}\n              {/*     setInstance(instance) */}\n              {/*     return instance */}\n              {/*   }} */}\n              {/* > */}\n              {/*   {edge.node.frontmatter.title} */}\n              {/* </TypeIt> */}\n              <h2>{edge.node.frontmatter.title}</h2>\n              <div dangerouslySetInnerHTML={{ __html: edge.node.html }} />\n            </>\n          ))}\n      </article>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n"],"sourceRoot":""}